#机器人几何参，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint
robot_radius: 0.5 #圆形
# footprint: [[-0.12, -0.12], [-0.12, 0.12], [0.12, 0.12], [0.12, -0.12]] #其他形状

obstacle_range: 50.0 # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
raytrace_range: 50.0 # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物
planner_frequency: 10.0

trace_unknown_space: true

#膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物
inflation_radius: 1.65
#代价比例系数，越大则代价值越小
cost_scaling_factor: 0.0

#地图类型
map_type: costmap
#导航包所需要的传感器

track_unknown_space: true
obstacle_layer:
#  enabled: true
#  obstacle_range: 5.0 # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
#  raytrace_range: 5.5 # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物
#  # size of obstacle
#  max_obstacle_heihgt: 5
#  min_obstacle_height: 0

#  unknown_threshold: 2.5
 mark_threshold:       0
#  combination_method:   1
#  trace_unknown_space: true
#  origin_z: 0.0
#  z_resolution: 1
#  z_voxels: 5
#  publish_voxel_map: false
# inflation_layer:
#  enabled: true
#  cost_scaling_factor: 3.0
#  inflation_radius: 2 #膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物

#static_layer:
#  enabled: true
